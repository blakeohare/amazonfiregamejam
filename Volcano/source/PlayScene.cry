import Game;
import GFX;
import Math;
import Random;

class PlayScene : AbstractScene {

    field counter = 0;

    field leftPressed = false;
    field rightPressed = false;
    field jumpPressed = false;

    field grid = makeGrid(20, 20);
    field player;
    field logicalGridTop = -20 + 15 * 40;
    field lavaLevel = 18 * 40;
    field nextRowId = 20;
    field rowMapper = [];
    field rowCount = 20;

    field cameraY = 0;

    constructor() : base() {
        this.player = new Player(400, 400);
        this.initializeGrid();
    }

    function getTile(gameX, gameY) { // as opposed to col/row
        y = gameY - this.logicalGridTop;
        col = floor(gameX / 40);
        row = floor(y / 40);
        if (col < 0 || col >= 20 || row < 0 || row >= this.grid.length) {
            return null;
        }

        return this.grid[row][col];
    }

    function initializeGrid() {

        for (y = 0; y < 20; ++y) {
            rowMapEntry = [y];
            this.rowMapper.add(rowMapEntry);
            for (x = 0; x < 20; ++x) {
                is_rock = true; // what?

                if (is_rock) {
                    this.grid[y][x] = new Tile('rock', rowMapEntry, this);
                } else {
                    this.grid[y][x] = new Tile('bg', rowMapEntry, this);
                }
            }
        }

        for (i = 0; i < 15; ++i) {
            this.createNewRow();
        }
    }

    function processInput(events) {
        this.jumpPressed = false;
        for (event : events) {
            switch (event.type) {
                case EventType.KEY_DOWN:
                case EventType.KEY_UP:
                    switch (event.key) {
                        case KeyboardKey.LEFT:
                            this.leftPressed = event.down;
                            break;
                        case KeyboardKey.RIGHT:
                            this.rightPressed = event.down;
                            break;
                        case KeyboardKey.SPACE:
                            this.jumpPressed = this.jumpPressed || event.down;
                            break;
                    }
                    break;
                default:
                    break;
            }
        }

        if (this.leftPressed) {
            this.player.dx = -10;
        } else if (this.rightPressed) {
            this.player.dx = 10;
        }

        if (this.jumpPressed && this.player.ground != null) {
            this.player.vy = -30;
        }
    }

    function createNewRow() {
        this.rowMapper = [[0]] + this.rowMapper;
        realloc = this.rowMapper.length;
        // this is a little hacky --2014
        // ya don't say... --2016
        if (realloc > 100) {
            realloc = 100;
        }
        for (i = 0; i < this.rowMapper.length; ++i) {
            this.rowMapper[i][0] = i;
        }

        this.rowCount++;

        row = [];
        opening = floor(Random.randomFloat() * 15) + 2;

        for (x = 0; x < 20; ++x) {
            isRock = x == 0 || x == 19;
            if (!isRock) {
                if (this.rowCount % 5 == 0) {
                    is_rock = true;
                    if (x > opening - 3 && x < opening + 3) {
                        isRock = false;
                    }
                }
            }
            row.add(new Tile(isRock ? 'rock' : 'bg', this.rowMapper[0], this));
        }

        this.grid = [row] + this.grid;

        this.logicalGridTop -= 40;
    }

    function update() {
        this.lavaLevel -= this.counter / 150.0 + 2;
        this.counter++;

        if (this.player.y > this.lavaLevel) {
            this.switchScene(new LoseScene(floor((400 - this.player.y) / 40.0 / 2)));
        }

        dy = this.player.y - this.logicalGridTop;
        if (dy < 400) {
            while (dy < 400) {
                this.createNewRow();
                dy = this.player.y - this.logicalGridTop;
            }
        }

        this.player.update(this);
    }

    function render() {
        view_top = floor(this.player.y - 350);
        view_bottom = view_top + 600;

        diff = view_top - this.logicalGridTop;
        start_row = floor(diff / 40.0);
        if (start_row < 0) start_row = 0;

        draw_at_y = floor(40 * start_row + this.logicalGridTop - view_top);

        lava_y = floor(this.lavaLevel - view_top);

        row_y = start_row;
        rc = this.counter / 4;
        for (y = 0; y < 16; ++y) {
            if (draw_at_y > lava_y) break;
            for (x = 0; x < 20; ++x) {
                t = this.grid[y + start_row][x];
                t.render(x * 40, draw_at_y);
            }
            draw_at_y += 40;
            row_y++;
        }

        this.player.render(view_top);

        lava_y = this.lavaLevel - view_top;
        first_row = true;
        for (y = lava_y; y < 600; y += 40) {
            for (x = 0; x < 800; x += 40) {
                if (first_row) {
                    img = ImageLibrary.get('tiles/lava_upper_' + (rc % 4 + 1) + '.png');
                } else {
                    img = ImageLibrary.get('tiles/lava_lower.png');
                }
                img.draw(x, y);
            }
            first_row = false;
        }
    }
}
