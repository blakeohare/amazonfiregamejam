class LevelStore {
    constructor() {
        this.levels = {};
        type_mapping = {
            ' ': 'floor',
            'x': 'wall',
            '1': 'entrance',
            '2': 'exit',
            'f': 'fire',
            'i': 'exitsign',
            '*': 'floor',
        };

        this.levels['level-1'] = this.build_level(1, type_mapping, [
            "xxxxxxxxxxxxxxxxxxxx",
            "x   xxx   fx   x   x",
            "1 x   x xxxx x x x x",
            "x xxx x x    x x x x",
            "x   x x x xxxx x x x",
            "xxx x x x x    x x x",
            "xfx x x x x xxxx x x",
            "x   x     x      xfx",
            "xxxxxxxxxxx xxxxxx x",
            "x   x   x   x      x",
            "x x x x x xxxxxxxx x",
            "x x x x x    x   xxi",
            "xfx   x   xx   x   2",
            "xxxxxxxxxxxxxxxxxxxx"]);

        this.levels['level-2'] = this.build_level(2, type_mapping, [
            "xxxxxxxxxxxxi2xxxxxx",
            "x  f               x",
            "x                  x",
            "x                  x",
            "x                  x",
            "x                  x",
            "x                  x",
            "x  *               x",
            "x                 fx",
            "x                  x",
            "x                  x",
            "x           f      x",
            "1                  x",
            "xxxxxxxxxxxxxxxxxxxx"]);

        this.levels['level-3'] = this.build_level(3, type_mapping, [
            "xxxxxxxxxxxxxxxxxxxx",
            "xxxxxxfxxxxxxxxxxxxx",
            "xxxxxx xxfxxxxxxxxxx",
            "xxxxxx xx xxfxxxxxxx",
            "xxxxxx xx xx xxfxxxx",
            "xxxxxx xx xx xx xxfx",
            "xxxxxx xx xx xx xx x",
            "xxxxxx xx xx xx xx x",
            "xxxxxx*xx xx xx xx x",
            "xxxxxx xx xx xx xx x",
            "x                  x",
            "i xxxxxxxxxxxxxxxx x",
            "2 xxxxxxxxxxx      x",
            "xxxxxxxxxxxxx1xxxxxx"]);

        this.levels['level-4'] = this.build_level(4, type_mapping, [
          "xxxxxxxxxxxxxxxxxx1x",
          "xxxxf    xxxxxxxxx x",
          "xxxxxxxx xxxxxxxxx x",
          "xxxxxxxx xxxxxxxxx x",
          "xxxxxxxx x     xxx x",
          "xxxxxxxx       xxx x",
          "x                  x",
          "x                  x",
          "x xxxxxx       xxxxx",
          "x xxxxxx*    x xxxxx",
          "x xxxxxxxxxxxx xxxxx",
          "x xxxxxxxxxxxx xxxxx",
          "x xxxxxxxxxxxxfxxxxx",
          "x2xxxxxxxxxxxxxxxxxx"]);

        this.levels['level-5'] = this.build_level(5, type_mapping, [
          "xxxxxxxxxxxxxxxxxxxx",
          "xxxxf              x",
          "x 1 xxxxxxxxxxxxxxxx",
          "x x               xx",
          "x x               xx",
          "x xxx             xx",
          "x   x  xxxxxxxxx  xx",
          "xxx x  xxxxxxxxx  xx",
          "xxx    xxxxxxxxx  xx",
          "xxx    xxxxxxxxx  xx",
          "xf  x  xxxxxxxxx  xx",
          "xxxxx             xx",
          "x f x*             2",
          "xxxxxxxxxxxxxxxxxxxx"]);

        this.levels['level-6'] = this.build_level(6, type_mapping, [
            "xxxxxxxxxxxxxxxxxxxx",
            "x   x              x",
            "x x x xxxxxxxxxxxx x",
            "x x x xfx   x   xx x",
            "x x   x   x   x xx x",
            "xfx x xxxxxxxxx xx x",
            "x x x              x",
            "x x xxxxxx xxxxxxx x",
            "x        x      x  x",
            "x x xxxxxxxxx xxx xx",
            "x x             x  x",
            "x xxxxxxxxxxxxxxxx x",
            "1 x                x",
            "xxx2ixxxxxxxxxxxxxxx"]);

        this.levels['level-7'] = this.build_level(7, type_mapping, [
            "xxx1xxxxxxxxxxxxxxxx",
            "x                 fx",
            "xxxxxxxx xxxxxxxxxxx",
            "xf                 x",
            "xxxxxxxxxxxxx xxxxxx",
            "x                  x",
            "xxxxxx xxxxxxxxxxxxx",
            "x                  x",
            "xxxxxxxxxx xxxxxxxxx",
            "x                  x",
            "xxxxxxx xxxxxxxxx xx",
            "x         x        x",
            "x         x  f     x",
            "xxxxx2ixxxxxxxxxxxxx"]);

        this.levels['level-8'] = this.build_level(8, type_mapping, [
            "xxxxx1xxxxxxxxxxxxxx",
            "x   x x            x",
            "x x x x xxxxxxxxxx x",
            "x x x x x        x x",
            "x x x x x xxxxxx x x",
            "x x x x x x    x x x",
            "x x x x x   xx x x x",
            "x x x x xxxxxx x x x",
            "x x x x        x x x",
            "x x x xxxxxxxxxx x x",
            "x x x            x x",
            "x x xxxxxxxxxxxxxx x",
            "xfx                x",
            "xxxxxxxxxxxxxxxxx2ix"]);
    }

    function level_exists(level) {
        return this.levels.contains(level);
    }

    function get_fresh_grid(level) {
        id = this.levels[level]['id'];
        output = make_grid(20, 14);
        copyThis = this.levels[level]['grid'];
        for (y = 0; y < 14; ++y) {
            for (x = 0; x < 20; ++x) {
                key = copyThis[x][y];
                styling = null;
                if (key == 'floor') {
                    style = id % 2 == 1 ? '1' : '2';
                    variation = $random() < .5 ? 'a' : 'b';
                    styling = style + variation;
                }
                t = new Tile(key, x, y);
                t.styling = styling;
                output[x][y] = t;
            }
        }

        for (y = 0; y < 14; ++y) {
            for (x = 0; x < 20; ++x) {
                t = output[x][y];
                if (t.type == 'wall') {
                    borders = [true, true, true, true];
                    if (x > 0 && output[x - 1][y].type != 'wall') {
                        borders[0] = false;
                    }
                    if (x < 19 && output[x + 1][y].type != 'wall') {
                        borders[2] = false;
                    }
                    if (y > 0 && output[x][y - 1].type != 'wall') {
                        borders[1] = false;
                    }
                    if (y < 13 && output[x][y + 1].type != 'wall') {
                        borders[3] = false;
                    }
                    styling = '';
                    if (!borders[1]) styling += 'n';
                    if (!borders[3]) styling += 's';
                    if (!borders[2]) styling += 'e';
                    if (!borders[0]) styling += 'w';

                    if (styling.length > 0) styling = '_' + styling;
                    t.styling = styling;
                }
            }
        }

        return output;
    }

    function get_starting_point(level) {
        return this.levels[level]['start'];
    }

    function get_finish(level) {
        return this.levels[level]['finish'];
    }

    function get_powerups(level) {
        return this.levels[level]['powerups'];
    }

    function build_level(id, type_mapping, rows) {
        grid = make_grid(20, 14);
        player_start = null;
        finish = null;
        powerups = [];
        for (y = 0; y < 14; ++y) {
            for (x = 0; x < 20; ++x) {
                key = rows[y][x];
                grid[x][y] = type_mapping[key];
                if (key == '1') {
                    player_start = [x, y];
                } else if (key == '2') {
                    finish = [x, y];
                } else if (key == '*') {
                    powerups.add([x, y]);
                }
            }
        }

        return {
            'grid': grid,
            'start': player_start,
            'finish': finish,
            'powerups': powerups,
            'id': id
        };
    }
}
